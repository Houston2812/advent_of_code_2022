// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package set

import "sync"

type StringSet struct {
	items map[string]bool
	lock  sync.RWMutex
}

func (s *StringSet) Add(t string) *StringSet {
	s.lock.Lock()
	defer s.lock.Unlock()
	if s.items == nil {
		s.items = make(map[string]bool)
	}

	_, ok := s.items[t]

	if !ok {
		s.items[t] = true
	}
	return s
}

func (s *StringSet) Clear() {

	s.lock.Lock()
	defer s.lock.Unlock()

	s.items = make(map[string]bool)
}

func (s *StringSet) Delete(item string) bool {

	s.lock.Lock()
	defer s.lock.Unlock()

	_, ok := s.items[item]

	if ok {
		delete(s.items, item)
	}
	return ok
}

func (s *StringSet) Has(item string) bool {
	s.lock.Lock()
	defer s.lock.Unlock()

	_, ok := s.items[item]

	return ok
}

func (s *StringSet) Strings() []string {

	s.lock.Lock()
	defer s.lock.Unlock()

	items := []string{}

	for i := range s.items {
		items = append(items, i)
	}

	return items
}

func (s *StringSet) Size() int {
	s.lock.Lock()
	defer s.lock.Unlock()

	return len(s.items)
}
